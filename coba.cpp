#include <iostream>
#include <vector>
#include <ncurses/curses.h>
int main() {
    // Define the pattern as a string
    std::string pattern =
        "####################################################################################################"
        "#0000000000###############################################0000########################0000000000000#"
        "#0000000000##00000###00000#######0000000###00000#############000######################0000000000000#"
        "#0000000000##0######0#####0#########0#####0#####0#############000#####################0000000000000#"
        "#0000000000##0#000##0#####0#########0#####0#####0####0000000000000####################0000000000000#"
        "#0000000000##0###0##0#####0#########0#####0#####0#############000#####################0000000000000#"
        "#0000000000##00000###00000##########0######00000#############000######################0000000000000#"
        "#0000000000###############################################0000########################0000000000000#"
        "#0000000000###########################################################################0000000000000#"
        "#00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000#"
        "#00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000#"
        "#0000000000##########################################################################00000000000000#"
        "#0000000000##000000####00000##00000000##0####0##000000000####00#00###################00000000000000#"
        "#0000000000##0#####0####000###0######0##0####0######0########00#00###################00000000000000#"
        "#0000000000##0#####0#####0####0#########0####0######0########00#00###################00000000000000#"
        "#0000000000##000000######0####0##00000##000000######0########00#00###################00000000000000#"
        "#0000000000##0#00########0####0##0###0##0####0######0########00#00###################00000000000000#"
        "#0000000000##0##00######000###0######0##0####0######0################################00000000000000#"
        "#0000000000##0###00####00000##00000000##0####0######0########00#00###################00000000000000#"
        "#0000000000##########################################################################00000000000000#"
        "#0000000000##########################################################################00000000000000#"
        "#0000000000##########################################################################00000000000000#"
        "#0000000000##########################################################################00000000000000#"
        "#0000000000##########################################################################00000000000000#"
        "####################################################################################################";

    // Get the dimensions of the pattern
    int rows = 25; // Number of rows in the pattern
    int cols = pattern.length() / rows;

    // Convert the pattern string to a 2D array of integers
    std::vector<std::vector<int>> patternArray(rows, std::vector<int>(cols, 0));

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            patternArray[i][j] = (pattern[i * cols + j] == '#') ? 1 : 0;
        }
    }

    // Display the 2D array
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << patternArray[i][j];
        }
        std::cout << std::endl;
    }

    initscr();
    noecho();
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
                if(patternArray[i][j]!=0){
                    mvprintw(i,j,"#");
                }
            }
    }
    refresh();
    getch();
    endwin();
    return 0;
}
